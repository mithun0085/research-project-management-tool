import React, { Component } from 'react';
import PropTypes from 'prop-types';
import {
  getLastState,
  subscribe,
  unsubscribe,
  getDataByKey,
  replaceArrayProp,
  dispatch,
} from 'rdux';

export const getCompDependentKeys = (localState = {}) => {
  return Object.keys(localState).map(key => localState[key])
  .map(replaceArrayProp);
};

export const getDispatchProps = (mapDispatch = {}, props) => {
  if (typeof mapDispatch === "function") {
    return mapDispatch(dispatch, props);
  }
  const mapObj = {};
  Object.keys(mapDispatch).forEach((key) => {
    mapObj[key] = (...args) => dispatch(mapDispatch[key].apply({}, args));
  });
  return mapObj;
};

let newSubscribeId = 1;

const getMapStateObj = (localStateMap = {}, lastState) => {
  const mapState = {};
  Object.keys(localStateMap).forEach((key) => {
    mapState[key] = getDataByKey(localStateMap[key], lastState);
});
  return mapState;
};

export class Provider extends Component {
  static childContextTypes = {
    store: PropTypes.object,
  };

  getChildContext() {
    return { store: this.props.store };
  }

  render() {
    return this.props.children;
  }
}

export const connect = (mapState, mapDispatch, copyStatic = []) => {
  return function (Comp) {
    class ConnectedComp extends Component {
      constructor(props) {
        super(props);
        const lastState = getLastState();
        const localStateMap = mapState(lastState, props);
        this.localStateMap = localStateMap;
        this.state = {
        ...getMapStateObj(localStateMap, lastState),
      ...getDispatchProps(mapDispatch)
      };
        this.subscribeId = newSubscribeId;
        this.compDependentKeys = getCompDependentKeys(localStateMap);
        newSubscribeId += 1;
      }

      componentWillMount() {
        const onUpdate = () => this.setState(getMapStateObj(this.localStateMap, getLastState()));
        subscribe(this.subscribeId, onUpdate, this.compDependentKeys);
      }

      componentWillUnmount() {
        unsubscribe(this.subscribeId, this.compDependentKeys);
      }

      render() {
        return (<Comp
        {...this.props}
        {...this.state}
      />);
      }
    }

    copyStatic.forEach((key) => {
      ConnectedComp[key] = Comp[key];
  });

    return ConnectedComp;
  }
};
