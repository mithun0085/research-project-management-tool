{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\n\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport class Socket extends Emitter {\n  /**\r\n   * `Socket` constructor.\r\n   *\r\n   * @public\r\n   */\n  constructor(io, nsp, opts) {\n    super();\n    this.connected = false;\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n\n    if (this.io._autoConnect) this.open();\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   */\n\n\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n\n\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\r\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n   */\n\n\n  get active() {\n    return !!this.subs;\n  }\n  /**\r\n   * \"Opens\" the socket.\r\n   *\r\n   * @public\r\n   */\n\n\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\r\n   * Alias for connect()\r\n   */\n\n\n  open() {\n    return this.connect();\n  }\n  /**\r\n   * Sends a `message` event.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\r\n   * Override `emit`.\r\n   * If the event is in `events`, it's emitted normally.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  emit(ev, ...args) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev + '\" is a reserved event name');\n    }\n\n    args.unshift(ev);\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false; // event ack callback\n\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n\n      this._registerAckCallback(id, ack);\n\n      packet.id = id;\n    }\n\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n    if (discardPacket) {} else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n\n    this.flags = {};\n    return this;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _registerAckCallback(id, ack) {\n    const timeout = this.flags.timeout;\n\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    } // @ts-ignore\n\n\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n\n    this.acks[id] = (...args) => {\n      // @ts-ignore\n      this.io.clearTimeoutFn(timer);\n      ack.apply(this, [null, ...args]);\n    };\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  packet(packet) {\n    packet.nsp = this.nsp;\n\n    this.io._packet(packet);\n  }\n  /**\r\n   * Called upon engine `open`.\r\n   *\r\n   * @private\r\n   */\n\n\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\r\n   * Called upon engine or manager `error`.\r\n   *\r\n   * @param err\r\n   * @private\r\n   */\n\n\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\r\n   * Called upon engine `close`.\r\n   *\r\n   * @param reason\r\n   * @param description\r\n   * @private\r\n   */\n\n\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n  }\n  /**\r\n   * Called with socket packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n\n        break;\n\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message); // @ts-ignore\n\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\r\n   * Called upon a server event.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    super.emit.apply(this, args);\n  }\n  /**\r\n   * Produces an ack callback to emit with an event.\r\n   *\r\n   * @private\r\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\r\n   * Called upon a server acknowlegement.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onack(packet) {\n    const ack = this.acks[packet.id];\n\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  /**\r\n   * Called upon server connect.\r\n   *\r\n   * @private\r\n   */\n\n\n  onconnect(id) {\n    this.id = id;\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\r\n   * Emit buffered events (received and emitted).\r\n   *\r\n   * @private\r\n   */\n\n\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\r\n   * Called upon server disconnect.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\r\n   * Called upon forced client/server side disconnections,\r\n   * this method ensures the manager stops tracking us and\r\n   * that reconnections don't get triggered for this.\r\n   *\r\n   * @private\r\n   */\n\n\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n\n    this.io[\"_destroy\"](this);\n  }\n  /**\r\n   * Disconnects the socket manually.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    } // remove socket from pool\n\n\n    this.destroy();\n\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n\n    return this;\n  }\n  /**\r\n   * Alias for disconnect()\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  close() {\n    return this.disconnect();\n  }\n  /**\r\n   * Sets the compress flag.\r\n   *\r\n   * @param compress - if `true`, compresses the sending data\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n   * ready to send messages.\r\n   *\r\n   * @returns self\r\n   * @public\r\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n   *\r\n   * ```\r\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n   *   if (err) {\r\n   *     // the server did not acknowledge the event in the given delay\r\n   *   }\r\n   * });\r\n   * ```\r\n   *\r\n   * @returns self\r\n   * @public\r\n   */\n\n\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   *\r\n   * @public\r\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @param listener\r\n   *\r\n   * <pre><code>\r\n   *\r\n   * socket.onAnyOutgoing((event, ...args) => {\r\n   *   console.log(event);\r\n   * });\r\n   *\r\n   * </pre></code>\r\n   *\r\n   * @public\r\n   */\n\n\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n    this._anyOutgoingListeners.push(listener);\n\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @param listener\r\n   *\r\n   * <pre><code>\r\n   *\r\n   * socket.prependAnyOutgoing((event, ...args) => {\r\n   *   console.log(event);\r\n   * });\r\n   *\r\n   * </pre></code>\r\n   *\r\n   * @public\r\n   */\n\n\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n    this._anyOutgoingListeners.unshift(listener);\n\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @param listener\r\n   *\r\n   * <pre><code>\r\n   *\r\n   * const handler = (event, ...args) => {\r\n   *   console.log(event);\r\n   * }\r\n   *\r\n   * socket.onAnyOutgoing(handler);\r\n   *\r\n   * // then later\r\n   * socket.offAnyOutgoing(handler);\r\n   *\r\n   * </pre></code>\r\n   *\r\n   * @public\r\n   */\n\n\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   *\r\n   * @public\r\n   */\n\n\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\r\n   * Notify the listeners for each packet sent\r\n   *\r\n   * @param packet\r\n   *\r\n   * @private\r\n   */\n\n\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HIRUNI/BACKEND/b/research-project-management-tool/frontend/node_modules/socket.io-client/build/esm/socket.js"],"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","disconnected","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"mappings":"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","sourcesContent":["import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.connected = false;\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Whether the socket is currently disconnected\r\n     */\r\n    get disconnected() {\r\n        return !this.connected;\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        const timeout = this.flags.timeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.connected = false;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason, description);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        });\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    onAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    prependAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * const handler = (event, ...args) => {\r\n     *   console.log(event);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(handler);\r\n     *\r\n     * // then later\r\n     * socket.offAnyOutgoing(handler);\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    offAnyOutgoing(listener) {\r\n        if (!this._anyOutgoingListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyOutgoingListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyOutgoingListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAnyOutgoing() {\r\n        return this._anyOutgoingListeners || [];\r\n    }\r\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\r\n    notifyOutgoingListeners(packet) {\r\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\r\n            const listeners = this._anyOutgoingListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, packet.data);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}