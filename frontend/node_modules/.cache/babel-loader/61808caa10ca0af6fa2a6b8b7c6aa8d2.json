{"ast":null,"code":"import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\n\nclass TransportError extends Error {\n  constructor(reason, description, context) {\n    super(reason);\n    this.description = description;\n    this.context = context;\n    this.type = \"TransportError\";\n  }\n\n}\n\nexport class Transport extends Emitter {\n  /**\r\n   * Transport abstract constructor.\r\n   *\r\n   * @param {Object} options.\r\n   * @api private\r\n   */\n  constructor(opts) {\n    super();\n    this.writable = false;\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n  /**\r\n   * Emits an error.\r\n   *\r\n   * @param {String} reason\r\n   * @param description\r\n   * @param context - the error context\r\n   * @return {Transport} for chaining\r\n   * @api protected\r\n   */\n\n\n  onError(reason, description, context) {\n    super.emitReserved(\"error\", new TransportError(reason, description, context));\n    return this;\n  }\n  /**\r\n   * Opens the transport.\r\n   *\r\n   * @api public\r\n   */\n\n\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n  /**\r\n   * Closes the transport.\r\n   *\r\n   * @api public\r\n   */\n\n\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n  /**\r\n   * Sends multiple packets.\r\n   *\r\n   * @param {Array} packets\r\n   * @api public\r\n   */\n\n\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {// this might happen if the transport was silently closed in the beforeunload event handler\n    }\n  }\n  /**\r\n   * Called upon open\r\n   *\r\n   * @api protected\r\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emitReserved(\"open\");\n  }\n  /**\r\n   * Called with data.\r\n   *\r\n   * @param {String} data\r\n   * @api protected\r\n   */\n\n\n  onData(data) {\n    const packet = decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\r\n   * Called with a decoded packet.\r\n   *\r\n   * @api protected\r\n   */\n\n\n  onPacket(packet) {\n    super.emitReserved(\"packet\", packet);\n  }\n  /**\r\n   * Called upon close.\r\n   *\r\n   * @api protected\r\n   */\n\n\n  onClose(details) {\n    this.readyState = \"closed\";\n    super.emitReserved(\"close\", details);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/USER/Documents/groupProject/research-project-management-tool/frontend/node_modules/engine.io-client/build/esm/transport.js"],"names":["decodePacket","Emitter","installTimerFunctions","TransportError","Error","constructor","reason","description","context","type","Transport","opts","writable","query","readyState","socket","onError","emitReserved","open","doOpen","close","doClose","onClose","send","packets","write","onOpen","onData","data","packet","binaryType","onPacket","details"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,qBAAT,QAAsC,WAAtC;;AACA,MAAMC,cAAN,SAA6BC,KAA7B,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsBC,OAAtB,EAA+B;AACtC,UAAMF,MAAN;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAY,gBAAZ;AACH;;AAN8B;;AAQnC,OAAO,MAAMC,SAAN,SAAwBT,OAAxB,CAAgC;AACnC;AACJ;AACA;AACA;AACA;AACA;AACII,EAAAA,WAAW,CAACM,IAAD,EAAO;AACd;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACAV,IAAAA,qBAAqB,CAAC,IAAD,EAAOS,IAAP,CAArB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKE,KAAL,GAAaF,IAAI,CAACE,KAAlB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAcJ,IAAI,CAACI,MAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACV,MAAD,EAASC,WAAT,EAAsBC,OAAtB,EAA+B;AAClC,UAAMS,YAAN,CAAmB,OAAnB,EAA4B,IAAId,cAAJ,CAAmBG,MAAnB,EAA2BC,WAA3B,EAAwCC,OAAxC,CAA5B;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIU,EAAAA,IAAI,GAAG;AACH,QAAI,aAAa,KAAKJ,UAAlB,IAAgC,OAAO,KAAKA,UAAhD,EAA4D;AACxD,WAAKA,UAAL,GAAkB,SAAlB;AACA,WAAKK,MAAL;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,GAAG;AACJ,QAAI,cAAc,KAAKN,UAAnB,IAAiC,WAAW,KAAKA,UAArD,EAAiE;AAC7D,WAAKO,OAAL;AACA,WAAKC,OAAL;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,OAAD,EAAU;AACV,QAAI,WAAW,KAAKV,UAApB,EAAgC;AAC5B,WAAKW,KAAL,CAAWD,OAAX;AACH,KAFD,MAGK,CACD;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,MAAM,GAAG;AACL,SAAKZ,UAAL,GAAkB,MAAlB;AACA,SAAKF,QAAL,GAAgB,IAAhB;AACA,UAAMK,YAAN,CAAmB,MAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,UAAMC,MAAM,GAAG7B,YAAY,CAAC4B,IAAD,EAAO,KAAKb,MAAL,CAAYe,UAAnB,CAA3B;AACA,SAAKC,QAAL,CAAcF,MAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACF,MAAD,EAAS;AACb,UAAMZ,YAAN,CAAmB,QAAnB,EAA6BY,MAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIP,EAAAA,OAAO,CAACU,OAAD,EAAU;AACb,SAAKlB,UAAL,GAAkB,QAAlB;AACA,UAAMG,YAAN,CAAmB,OAAnB,EAA4Be,OAA5B;AACH;;AAvGkC","sourcesContent":["import { decodePacket } from \"engine.io-parser\";\r\nimport { Emitter } from \"@socket.io/component-emitter\";\r\nimport { installTimerFunctions } from \"./util.js\";\r\nclass TransportError extends Error {\r\n    constructor(reason, description, context) {\r\n        super(reason);\r\n        this.description = description;\r\n        this.context = context;\r\n        this.type = \"TransportError\";\r\n    }\r\n}\r\nexport class Transport extends Emitter {\r\n    /**\r\n     * Transport abstract constructor.\r\n     *\r\n     * @param {Object} options.\r\n     * @api private\r\n     */\r\n    constructor(opts) {\r\n        super();\r\n        this.writable = false;\r\n        installTimerFunctions(this, opts);\r\n        this.opts = opts;\r\n        this.query = opts.query;\r\n        this.readyState = \"\";\r\n        this.socket = opts.socket;\r\n    }\r\n    /**\r\n     * Emits an error.\r\n     *\r\n     * @param {String} reason\r\n     * @param description\r\n     * @param context - the error context\r\n     * @return {Transport} for chaining\r\n     * @api protected\r\n     */\r\n    onError(reason, description, context) {\r\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\r\n        return this;\r\n    }\r\n    /**\r\n     * Opens the transport.\r\n     *\r\n     * @api public\r\n     */\r\n    open() {\r\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\r\n            this.readyState = \"opening\";\r\n            this.doOpen();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Closes the transport.\r\n     *\r\n     * @api public\r\n     */\r\n    close() {\r\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n            this.doClose();\r\n            this.onClose();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends multiple packets.\r\n     *\r\n     * @param {Array} packets\r\n     * @api public\r\n     */\r\n    send(packets) {\r\n        if (\"open\" === this.readyState) {\r\n            this.write(packets);\r\n        }\r\n        else {\r\n            // this might happen if the transport was silently closed in the beforeunload event handler\r\n        }\r\n    }\r\n    /**\r\n     * Called upon open\r\n     *\r\n     * @api protected\r\n     */\r\n    onOpen() {\r\n        this.readyState = \"open\";\r\n        this.writable = true;\r\n        super.emitReserved(\"open\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @param {String} data\r\n     * @api protected\r\n     */\r\n    onData(data) {\r\n        const packet = decodePacket(data, this.socket.binaryType);\r\n        this.onPacket(packet);\r\n    }\r\n    /**\r\n     * Called with a decoded packet.\r\n     *\r\n     * @api protected\r\n     */\r\n    onPacket(packet) {\r\n        super.emitReserved(\"packet\", packet);\r\n    }\r\n    /**\r\n     * Called upon close.\r\n     *\r\n     * @api protected\r\n     */\r\n    onClose(details) {\r\n        this.readyState = \"closed\";\r\n        super.emitReserved(\"close\", details);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}