{"ast":null,"code":"import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nimport { XHR as XMLHttpRequest } from \"./xmlhttprequest.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\n\nfunction empty() {}\n\nconst hasXHR2 = function () {\n  const xhr = new XMLHttpRequest({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\n\nexport class Polling extends Transport {\n  /**\r\n   * XHR Polling constructor.\r\n   *\r\n   * @param {Object} opts\r\n   * @api public\r\n   */\n  constructor(opts) {\n    super(opts);\n    this.polling = false;\n\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port; // some user agents have empty `location.port`\n\n      if (!port) {\n        port = isSSL ? \"443\" : \"80\";\n      }\n\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\r\n     * XHR supports binary\r\n     */\n\n\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n  /**\r\n   * Transport name.\r\n   */\n\n\n  get name() {\n    return \"polling\";\n  }\n  /**\r\n   * Opens the socket (triggers polling). We write a PING message to determine\r\n   * when the transport is open.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doOpen() {\n    this.poll();\n  }\n  /**\r\n   * Pauses polling.\r\n   *\r\n   * @param {Function} callback upon buffers are flushed and transport is paused\r\n   * @api private\r\n   */\n\n\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        total++;\n        this.once(\"pollComplete\", function () {\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        total++;\n        this.once(\"drain\", function () {\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\r\n   * Starts polling cycle.\r\n   *\r\n   * @api public\r\n   */\n\n\n  poll() {\n    this.polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  /**\r\n   * Overloads onData to detect payloads.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onData(data) {\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      } // if its a close packet, we close the ongoing requests\n\n\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      } // otherwise bypass onData and handle the message\n\n\n      this.onPacket(packet);\n    }; // decode payload\n\n\n    decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emitReserved(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {}\n    }\n  }\n  /**\r\n   * For polling, send a close packet.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doClose() {\n    const close = () => {\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      this.once(\"open\", close);\n    }\n  }\n  /**\r\n   * Writes a packets payload.\r\n   *\r\n   * @param {Array} data packets\r\n   * @param {Function} drain callback\r\n   * @api private\r\n   */\n\n\n  write(packets) {\n    this.writable = false;\n    encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  /**\r\n   * Generates uri for connection.\r\n   *\r\n   * @api private\r\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\"; // cache busting is forced\n\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    } // avoid port if default for schema\n\n\n    if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    }\n\n    const encodedQuery = encode(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n  /**\r\n   * Creates a request.\r\n   *\r\n   * @param {String} method\r\n   * @api private\r\n   */\n\n\n  request(opts = {}) {\n    Object.assign(opts, {\n      xd: this.xd,\n      xs: this.xs\n    }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n  /**\r\n   * Sends data.\r\n   *\r\n   * @param {String} data to send.\r\n   * @param {Function} called upon flush.\r\n   * @api private\r\n   */\n\n\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data: data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr post error\", xhrStatus, context);\n    });\n  }\n  /**\r\n   * Starts a poll cycle.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doPoll() {\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr poll error\", xhrStatus, context);\n    });\n    this.pollXhr = req;\n  }\n\n}\nexport class Request extends Emitter {\n  /**\r\n   * Request constructor\r\n   *\r\n   * @param {Object} options\r\n   * @api public\r\n   */\n  constructor(uri, opts) {\n    super();\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.create();\n  }\n  /**\r\n   * Creates the XHR object and sends the request.\r\n   *\r\n   * @api private\r\n   */\n\n\n  create() {\n    const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n    const xhr = this.xhr = new XMLHttpRequest(opts);\n\n    try {\n      xhr.open(this.method, this.uri, this.async);\n\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n\n      if (\"POST\" === this.method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {} // ie6 check\n\n\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n\n      xhr.onreadystatechange = () => {\n        if (4 !== xhr.readyState) return;\n\n        if (200 === xhr.status || 1223 === xhr.status) {\n          this.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          this.setTimeoutFn(() => {\n            this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n          }, 0);\n        }\n      };\n\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      this.setTimeoutFn(() => {\n        this.onError(e);\n      }, 0);\n      return;\n    }\n\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n  /**\r\n   * Called upon error.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onError(err) {\n    this.emitReserved(\"error\", err, this.xhr);\n    this.cleanup(true);\n  }\n  /**\r\n   * Cleans up house.\r\n   *\r\n   * @api private\r\n   */\n\n\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    }\n\n    this.xhr.onreadystatechange = empty;\n\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n\n    this.xhr = null;\n  }\n  /**\r\n   * Called upon load.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onLoad() {\n    const data = this.xhr.responseText;\n\n    if (data !== null) {\n      this.emitReserved(\"data\", data);\n      this.emitReserved(\"success\");\n      this.cleanup();\n    }\n  }\n  /**\r\n   * Aborts the request.\r\n   *\r\n   * @api public\r\n   */\n\n\n  abort() {\n    this.cleanup();\n  }\n\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\n\nif (typeof document !== \"undefined\") {\n  // @ts-ignore\n  if (typeof attachEvent === \"function\") {\n    // @ts-ignore\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/HIRUNI/BACKEND/b/research-project-management-tool/frontend/node_modules/engine.io-client/build/esm/transports/polling.js"],"names":["Transport","yeast","encode","encodePayload","decodePayload","XHR","XMLHttpRequest","Emitter","installTimerFunctions","pick","globalThisShim","globalThis","empty","hasXHR2","xhr","xdomain","responseType","Polling","constructor","opts","polling","location","isSSL","protocol","port","xd","hostname","xs","secure","forceBase64","supportsBinary","name","doOpen","poll","pause","onPause","readyState","writable","total","once","doPoll","emitReserved","onData","data","callback","packet","type","onOpen","onClose","description","onPacket","socket","binaryType","forEach","doClose","close","write","packets","doWrite","uri","query","schema","timestampRequests","timestampParam","sid","b64","Number","encodedQuery","ipv6","indexOf","path","length","request","Object","assign","Request","fn","req","method","on","xhrStatus","context","onError","bind","pollXhr","async","undefined","create","xscheme","open","extraHeaders","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","withCredentials","requestTimeout","timeout","onreadystatechange","status","onLoad","setTimeoutFn","send","document","index","requestsCount","requests","err","cleanup","fromError","abort","responseText","attachEvent","unloadHandler","addEventListener","terminationEvent"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\r\nimport { yeast } from \"../contrib/yeast.js\";\r\nimport { encode } from \"../contrib/parseqs.js\";\r\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\r\nimport { XHR as XMLHttpRequest } from \"./xmlhttprequest.js\";\r\nimport { Emitter } from \"@socket.io/component-emitter\";\r\nimport { installTimerFunctions, pick } from \"../util.js\";\r\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\r\nfunction empty() { }\r\nconst hasXHR2 = (function () {\r\n    const xhr = new XMLHttpRequest({\r\n        xdomain: false\r\n    });\r\n    return null != xhr.responseType;\r\n})();\r\nexport class Polling extends Transport {\r\n    /**\r\n     * XHR Polling constructor.\r\n     *\r\n     * @param {Object} opts\r\n     * @api public\r\n     */\r\n    constructor(opts) {\r\n        super(opts);\r\n        this.polling = false;\r\n        if (typeof location !== \"undefined\") {\r\n            const isSSL = \"https:\" === location.protocol;\r\n            let port = location.port;\r\n            // some user agents have empty `location.port`\r\n            if (!port) {\r\n                port = isSSL ? \"443\" : \"80\";\r\n            }\r\n            this.xd =\r\n                (typeof location !== \"undefined\" &&\r\n                    opts.hostname !== location.hostname) ||\r\n                    port !== opts.port;\r\n            this.xs = opts.secure !== isSSL;\r\n        }\r\n        /**\r\n         * XHR supports binary\r\n         */\r\n        const forceBase64 = opts && opts.forceBase64;\r\n        this.supportsBinary = hasXHR2 && !forceBase64;\r\n    }\r\n    /**\r\n     * Transport name.\r\n     */\r\n    get name() {\r\n        return \"polling\";\r\n    }\r\n    /**\r\n     * Opens the socket (triggers polling). We write a PING message to determine\r\n     * when the transport is open.\r\n     *\r\n     * @api private\r\n     */\r\n    doOpen() {\r\n        this.poll();\r\n    }\r\n    /**\r\n     * Pauses polling.\r\n     *\r\n     * @param {Function} callback upon buffers are flushed and transport is paused\r\n     * @api private\r\n     */\r\n    pause(onPause) {\r\n        this.readyState = \"pausing\";\r\n        const pause = () => {\r\n            this.readyState = \"paused\";\r\n            onPause();\r\n        };\r\n        if (this.polling || !this.writable) {\r\n            let total = 0;\r\n            if (this.polling) {\r\n                total++;\r\n                this.once(\"pollComplete\", function () {\r\n                    --total || pause();\r\n                });\r\n            }\r\n            if (!this.writable) {\r\n                total++;\r\n                this.once(\"drain\", function () {\r\n                    --total || pause();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            pause();\r\n        }\r\n    }\r\n    /**\r\n     * Starts polling cycle.\r\n     *\r\n     * @api public\r\n     */\r\n    poll() {\r\n        this.polling = true;\r\n        this.doPoll();\r\n        this.emitReserved(\"poll\");\r\n    }\r\n    /**\r\n     * Overloads onData to detect payloads.\r\n     *\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        const callback = packet => {\r\n            // if its the first message we consider the transport open\r\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\r\n                this.onOpen();\r\n            }\r\n            // if its a close packet, we close the ongoing requests\r\n            if (\"close\" === packet.type) {\r\n                this.onClose({ description: \"transport closed by the server\" });\r\n                return false;\r\n            }\r\n            // otherwise bypass onData and handle the message\r\n            this.onPacket(packet);\r\n        };\r\n        // decode payload\r\n        decodePayload(data, this.socket.binaryType).forEach(callback);\r\n        // if an event did not trigger closing\r\n        if (\"closed\" !== this.readyState) {\r\n            // if we got data we're not polling\r\n            this.polling = false;\r\n            this.emitReserved(\"pollComplete\");\r\n            if (\"open\" === this.readyState) {\r\n                this.poll();\r\n            }\r\n            else {\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * For polling, send a close packet.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose() {\r\n        const close = () => {\r\n            this.write([{ type: \"close\" }]);\r\n        };\r\n        if (\"open\" === this.readyState) {\r\n            close();\r\n        }\r\n        else {\r\n            // in case we're trying to close while\r\n            // handshaking is in progress (GH-164)\r\n            this.once(\"open\", close);\r\n        }\r\n    }\r\n    /**\r\n     * Writes a packets payload.\r\n     *\r\n     * @param {Array} data packets\r\n     * @param {Function} drain callback\r\n     * @api private\r\n     */\r\n    write(packets) {\r\n        this.writable = false;\r\n        encodePayload(packets, data => {\r\n            this.doWrite(data, () => {\r\n                this.writable = true;\r\n                this.emitReserved(\"drain\");\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\r\n    uri() {\r\n        let query = this.query || {};\r\n        const schema = this.opts.secure ? \"https\" : \"http\";\r\n        let port = \"\";\r\n        // cache busting is forced\r\n        if (false !== this.opts.timestampRequests) {\r\n            query[this.opts.timestampParam] = yeast();\r\n        }\r\n        if (!this.supportsBinary && !query.sid) {\r\n            query.b64 = 1;\r\n        }\r\n        // avoid port if default for schema\r\n        if (this.opts.port &&\r\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\r\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\r\n            port = \":\" + this.opts.port;\r\n        }\r\n        const encodedQuery = encode(query);\r\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n        return (schema +\r\n            \"://\" +\r\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n            port +\r\n            this.opts.path +\r\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\r\n    }\r\n    /**\r\n     * Creates a request.\r\n     *\r\n     * @param {String} method\r\n     * @api private\r\n     */\r\n    request(opts = {}) {\r\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\r\n        return new Request(this.uri(), opts);\r\n    }\r\n    /**\r\n     * Sends data.\r\n     *\r\n     * @param {String} data to send.\r\n     * @param {Function} called upon flush.\r\n     * @api private\r\n     */\r\n    doWrite(data, fn) {\r\n        const req = this.request({\r\n            method: \"POST\",\r\n            data: data\r\n        });\r\n        req.on(\"success\", fn);\r\n        req.on(\"error\", (xhrStatus, context) => {\r\n            this.onError(\"xhr post error\", xhrStatus, context);\r\n        });\r\n    }\r\n    /**\r\n     * Starts a poll cycle.\r\n     *\r\n     * @api private\r\n     */\r\n    doPoll() {\r\n        const req = this.request();\r\n        req.on(\"data\", this.onData.bind(this));\r\n        req.on(\"error\", (xhrStatus, context) => {\r\n            this.onError(\"xhr poll error\", xhrStatus, context);\r\n        });\r\n        this.pollXhr = req;\r\n    }\r\n}\r\nexport class Request extends Emitter {\r\n    /**\r\n     * Request constructor\r\n     *\r\n     * @param {Object} options\r\n     * @api public\r\n     */\r\n    constructor(uri, opts) {\r\n        super();\r\n        installTimerFunctions(this, opts);\r\n        this.opts = opts;\r\n        this.method = opts.method || \"GET\";\r\n        this.uri = uri;\r\n        this.async = false !== opts.async;\r\n        this.data = undefined !== opts.data ? opts.data : null;\r\n        this.create();\r\n    }\r\n    /**\r\n     * Creates the XHR object and sends the request.\r\n     *\r\n     * @api private\r\n     */\r\n    create() {\r\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\r\n        opts.xdomain = !!this.opts.xd;\r\n        opts.xscheme = !!this.opts.xs;\r\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\r\n        try {\r\n            xhr.open(this.method, this.uri, this.async);\r\n            try {\r\n                if (this.opts.extraHeaders) {\r\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\r\n                    for (let i in this.opts.extraHeaders) {\r\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\r\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            if (\"POST\" === this.method) {\r\n                try {\r\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n                catch (e) { }\r\n            }\r\n            try {\r\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\r\n            }\r\n            catch (e) { }\r\n            // ie6 check\r\n            if (\"withCredentials\" in xhr) {\r\n                xhr.withCredentials = this.opts.withCredentials;\r\n            }\r\n            if (this.opts.requestTimeout) {\r\n                xhr.timeout = this.opts.requestTimeout;\r\n            }\r\n            xhr.onreadystatechange = () => {\r\n                if (4 !== xhr.readyState)\r\n                    return;\r\n                if (200 === xhr.status || 1223 === xhr.status) {\r\n                    this.onLoad();\r\n                }\r\n                else {\r\n                    // make sure the `error` event handler that's user-set\r\n                    // does not throw in the same tick and gets caught here\r\n                    this.setTimeoutFn(() => {\r\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\r\n                    }, 0);\r\n                }\r\n            };\r\n            xhr.send(this.data);\r\n        }\r\n        catch (e) {\r\n            // Need to defer since .create() is called directly from the constructor\r\n            // and thus the 'error' event can only be only bound *after* this exception\r\n            // occurs.  Therefore, also, we cannot throw here at all.\r\n            this.setTimeoutFn(() => {\r\n                this.onError(e);\r\n            }, 0);\r\n            return;\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            this.index = Request.requestsCount++;\r\n            Request.requests[this.index] = this;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon error.\r\n     *\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        this.emitReserved(\"error\", err, this.xhr);\r\n        this.cleanup(true);\r\n    }\r\n    /**\r\n     * Cleans up house.\r\n     *\r\n     * @api private\r\n     */\r\n    cleanup(fromError) {\r\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\r\n            return;\r\n        }\r\n        this.xhr.onreadystatechange = empty;\r\n        if (fromError) {\r\n            try {\r\n                this.xhr.abort();\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (typeof document !== \"undefined\") {\r\n            delete Request.requests[this.index];\r\n        }\r\n        this.xhr = null;\r\n    }\r\n    /**\r\n     * Called upon load.\r\n     *\r\n     * @api private\r\n     */\r\n    onLoad() {\r\n        const data = this.xhr.responseText;\r\n        if (data !== null) {\r\n            this.emitReserved(\"data\", data);\r\n            this.emitReserved(\"success\");\r\n            this.cleanup();\r\n        }\r\n    }\r\n    /**\r\n     * Aborts the request.\r\n     *\r\n     * @api public\r\n     */\r\n    abort() {\r\n        this.cleanup();\r\n    }\r\n}\r\nRequest.requestsCount = 0;\r\nRequest.requests = {};\r\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\r\nif (typeof document !== \"undefined\") {\r\n    // @ts-ignore\r\n    if (typeof attachEvent === \"function\") {\r\n        // @ts-ignore\r\n        attachEvent(\"onunload\", unloadHandler);\r\n    }\r\n    else if (typeof addEventListener === \"function\") {\r\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\r\n        addEventListener(terminationEvent, unloadHandler, false);\r\n    }\r\n}\r\nfunction unloadHandler() {\r\n    for (let i in Request.requests) {\r\n        if (Request.requests.hasOwnProperty(i)) {\r\n            Request.requests[i].abort();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}