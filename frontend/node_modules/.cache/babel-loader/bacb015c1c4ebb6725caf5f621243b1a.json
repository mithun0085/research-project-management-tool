{"ast":null,"code":"import { useTheme } from '@chakra-ui/system';\nimport { isFunction, isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { useState, useLayoutEffect, useEffect } from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar useSafeLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param defaultValues the default values to match\n */\n\nfunction useMediaQuery(query, defaultValues) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var defaults = Array.isArray(defaultValues) ? defaultValues : [defaultValues];\n  defaults = defaults.filter(function (v) {\n    return v != null;\n  });\n\n  var _useState = useState(function () {\n    return queries.map(function (query, index) {\n      var _defaults$index;\n\n      return {\n        media: query,\n        matches: (_defaults$index = defaults[index]) != null ? _defaults$index : false\n      };\n    });\n  }),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  useSafeLayoutEffect(function () {\n    // set initial matches\n    setValue(queries.map(function (query) {\n      return {\n        media: query,\n        matches: env.window.matchMedia(query).matches\n      };\n    }));\n    var mql = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n\n    var handler = function handler(evt) {\n      setValue(function (prev) {\n        return prev.slice().map(function (item) {\n          if (item.media === evt.media) return _extends({}, item, {\n            matches: evt.matches\n          });\n          return item;\n        });\n      });\n    };\n\n    mql.forEach(function (mql) {\n      if (isFunction(mql.addListener)) mql.addListener(handler);else mql.addEventListener(\"change\", handler);\n    });\n    return function () {\n      mql.forEach(function (mql) {\n        if (isFunction(mql.removeListener)) mql.removeListener(handler);else mql.removeEventListener(\"change\", handler);\n      });\n    };\n  }, []);\n  return value.map(function (item) {\n    return item.matches;\n  });\n}\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\n\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n/**\n * React hook used to get the user's animation preference.\n */\n\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  var _breakpoints$index$br, _breakpoints$index;\n\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n\n  var theme = useTheme();\n\n  var breakpoints = theme.__breakpoints.details.map(function (_ref) {\n    var minMaxQuery = _ref.minMaxQuery,\n        breakpoint = _ref.breakpoint;\n    return {\n      breakpoint: breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    };\n  });\n\n  var values = useMediaQuery(breakpoints.map(function (bp) {\n    return bp.query;\n  }), breakpoints.map(function (bp) {\n    return bp.breakpoint === defaultBreakpoint;\n  }));\n  var index = values.findIndex(function (value) {\n    return value == true;\n  });\n  return (_breakpoints$index$br = (_breakpoints$index = breakpoints[index]) == null ? void 0 : _breakpoints$index.breakpoint) != null ? _breakpoints$index$br : defaultBreakpoint;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","map":{"version":3,"sources":["E:/Group Projects/AF Project/research-project-management-tool/frontend/node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js"],"names":["useTheme","isFunction","isBrowser","__DEV__","memoizedGet","breakpoints","isArray","fromEntries","arrayToObjectNotation","React","useState","useLayoutEffect","useEffect","useEnvironment","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","useSafeLayoutEffect","useMediaQuery","query","defaultValues","env","queries","Array","defaults","filter","v","_useState","map","index","_defaults$index","media","matches","value","setValue","window","matchMedia","mql","handler","evt","prev","slice","item","forEach","addListener","addEventListener","removeListener","removeEventListener","Visibility","props","breakpoint","hide","children","_useMediaQuery","show","isVisible","rendered","Hide","useQuery","createElement","displayName","Show","getBreakpoint","theme","_props$breakpoint","below","above","bpBelow","bpAbove","usePrefersReducedMotion","prefersReducedMotion","useColorModePreference","_useMediaQuery2","isLight","isDark","undefined","useBreakpoint","defaultBreakpoint","_breakpoints$index$br","_breakpoints$index","__breakpoints","details","_ref","minMaxQuery","replace","values","bp","findIndex","getClosestValue","breakpoints$1","keys","indexOf","stopIndex","_key","useBreakpointValue","_theme$__breakpoints","from","obj","entries"],"mappings":"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","sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isFunction, isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { useState, useLayoutEffect, useEffect } from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar useSafeLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param defaultValues the default values to match\n */\n\nfunction useMediaQuery(query, defaultValues) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var defaults = Array.isArray(defaultValues) ? defaultValues : [defaultValues];\n  defaults = defaults.filter(function (v) {\n    return v != null;\n  });\n\n  var _useState = useState(function () {\n    return queries.map(function (query, index) {\n      var _defaults$index;\n\n      return {\n        media: query,\n        matches: (_defaults$index = defaults[index]) != null ? _defaults$index : false\n      };\n    });\n  }),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  useSafeLayoutEffect(function () {\n    // set initial matches\n    setValue(queries.map(function (query) {\n      return {\n        media: query,\n        matches: env.window.matchMedia(query).matches\n      };\n    }));\n    var mql = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n\n    var handler = function handler(evt) {\n      setValue(function (prev) {\n        return prev.slice().map(function (item) {\n          if (item.media === evt.media) return _extends({}, item, {\n            matches: evt.matches\n          });\n          return item;\n        });\n      });\n    };\n\n    mql.forEach(function (mql) {\n      if (isFunction(mql.addListener)) mql.addListener(handler);else mql.addEventListener(\"change\", handler);\n    });\n    return function () {\n      mql.forEach(function (mql) {\n        if (isFunction(mql.removeListener)) mql.removeListener(handler);else mql.removeEventListener(\"change\", handler);\n      });\n    };\n  }, []);\n  return value.map(function (item) {\n    return item.matches;\n  });\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  var _breakpoints$index$br, _breakpoints$index;\n\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n\n  var theme = useTheme();\n\n  var breakpoints = theme.__breakpoints.details.map(function (_ref) {\n    var minMaxQuery = _ref.minMaxQuery,\n        breakpoint = _ref.breakpoint;\n    return {\n      breakpoint: breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    };\n  });\n\n  var values = useMediaQuery(breakpoints.map(function (bp) {\n    return bp.query;\n  }), breakpoints.map(function (bp) {\n    return bp.breakpoint === defaultBreakpoint;\n  }));\n  var index = values.findIndex(function (value) {\n    return value == true;\n  });\n  return (_breakpoints$index$br = (_breakpoints$index = breakpoints[index]) == null ? void 0 : _breakpoints$index.breakpoint) != null ? _breakpoints$index$br : defaultBreakpoint;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };\n"]},"metadata":{},"sourceType":"module"}