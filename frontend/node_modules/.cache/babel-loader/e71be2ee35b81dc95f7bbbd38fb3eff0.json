{"ast":null,"code":"var trunc = require('../internals/math-trunc'); // `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\n\n\nmodule.exports = function (argument) {\n  var number = +argument; // eslint-disable-next-line no-self-compare -- NaN check\n\n  return number !== number || number === 0 ? 0 : trunc(number);\n};","map":{"version":3,"sources":["E:/Group Projects/AF Project/research-project-management-tool/frontend/node_modules/react-scroll-to-bottom/node_modules/core-js-pure/internals/to-integer-or-infinity.js"],"names":["trunc","require","module","exports","argument","number"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,yBAAD,CAAnB,C,CAEA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoB;AACnC,MAAIC,MAAM,GAAG,CAACD,QAAd,CADmC,CAEnC;;AACA,SAAOC,MAAM,KAAKA,MAAX,IAAqBA,MAAM,KAAK,CAAhC,GAAoC,CAApC,GAAwCL,KAAK,CAACK,MAAD,CAApD;AACD,CAJD","sourcesContent":["var trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"]},"metadata":{},"sourceType":"script"}